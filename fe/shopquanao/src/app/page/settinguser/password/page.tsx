"use client";

import React, { useState } from "react";

export default function ChangePasswordSection() {
  const [isForgotMode, setIsForgotMode] = useState(false);
  const [step, setStep] = useState<"email" | "verify">("email");

  const [form, setForm] = useState({
    currentPassword: "",
    newPassword: "",
    confirmNewPassword: "",
    email: "",
    verifyCode: "",
  });

  const [sentCode, setSentCode] = useState(""); // M√£ x√°c minh server g·ª≠i v·ªÅ (gi·∫£ l·∫≠p)
  const [message, setMessage] = useState("");

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value } = e.target;
    setForm((prev) => ({ ...prev, [name]: value }));
  };

  const generateRandomCode = () => {
    return Math.floor(1000 + Math.random() * 9000).toString(); // 4 s·ªë ng·∫´u nhi√™n
  };

  const handleSendCode = () => {
    const code = generateRandomCode();
    setSentCode(code);
    console.log("M√£ x√°c nh·∫≠n (gi·∫£ l·∫≠p):", code);
    setStep("verify");
  };

  const handleVerifyCode = () => {
    if (form.verifyCode === sentCode) {
      setMessage("‚úÖ M√£ x√°c nh·∫≠n ch√≠nh x√°c. B·∫°n c√≥ th·ªÉ ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u.");
    } else {
      setMessage("‚ùå M√£ x√°c nh·∫≠n kh√¥ng ƒë√∫ng. Vui l√≤ng ki·ªÉm tra l·∫°i.");
    }
  };

  const handleSubmitChangePassword = () => {
    if (form.newPassword !== form.confirmNewPassword) {
      setMessage("‚ùå M·∫≠t kh·∫©u m·ªõi kh√¥ng kh·ªõp.");
      return;
    }
    // TODO: G·ª≠i API ƒë·ªïi m·∫≠t kh·∫©u ·ªü ƒë√¢y
    setMessage("‚úÖ ƒê·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng.");
  };

  return (
    <div className="max-w-md mx-auto bg-white p-6 rounded shadow mt-10 relative">
      <h2 className="text-xl font-semibold mb-4 text-gray-700">
        {isForgotMode ? "Qu√™n m·∫≠t kh·∫©u" : "ƒê·ªïi m·∫≠t kh·∫©u"}
      </h2>

      {!isForgotMode ? (
        // üëâ Form ƒë·ªïi m·∫≠t kh·∫©u
        <>
          <div className="space-y-4">
            <div>
              <label className="block text-sm mb-1 text-gray-600">M·∫≠t kh·∫©u hi·ªán t·∫°i</label>
              <input
                type="password"
                name="currentPassword"
                value={form.currentPassword}
                onChange={handleInputChange}
                className="w-full border px-3 py-2 rounded"
              />
            </div>
            <div>
              <label className="block text-sm mb-1 text-gray-600">M·∫≠t kh·∫©u m·ªõi</label>
              <input
                type="password"
                name="newPassword"
                value={form.newPassword}
                onChange={handleInputChange}
                className="w-full border px-3 py-2 rounded"
              />
            </div>
            <div>
              <label className="block text-sm mb-1 text-gray-600">Nh·∫≠p l·∫°i m·∫≠t kh·∫©u m·ªõi</label>
              <input
                type="password"
                name="confirmNewPassword"
                value={form.confirmNewPassword}
                onChange={handleInputChange}
                className="w-full border px-3 py-2 rounded"
              />
            </div>
            <button
              onClick={handleSubmitChangePassword}
              className="w-full bg-blue-600 hover:bg-blue-700 text-white py-2 rounded mt-4"
            >
              ƒê·ªïi m·∫≠t kh·∫©u
            </button>
            <p className="text-sm text-right text-blue-600 cursor-pointer" onClick={() => setIsForgotMode(true)}>
              Qu√™n m·∫≠t kh·∫©u?
            </p>
          </div>
        </>
      ) : (
        // üëâ Form qu√™n m·∫≠t kh·∫©u
        <>
          {step === "email" && (
            <div className="space-y-4">
              <label className="block text-sm mb-1 text-gray-600">Nh·∫≠p email c·ªßa b·∫°n</label>
              <input
                type="email"
                name="email"
                value={form.email}
                onChange={handleInputChange}
                className="w-full border px-3 py-2 rounded"
              />
              <button
                type="button"
                onClick={handleSendCode}
                className="w-full bg-blue-600 hover:bg-blue-700 text-white py-2 rounded"
              >
                G·ª≠i m√£ x√°c nh·∫≠n
              </button>
              <p className="text-sm text-gray-600">* M·ªôt m√£ x√°c nh·∫≠n g·ªìm 4 s·ªë s·∫Ω ƒë∆∞·ª£c g·ª≠i t·ªõi email c·ªßa b·∫°n.</p>
              <p className="text-sm text-blue-500 cursor-pointer" onClick={() => setIsForgotMode(false)}>
                üîô Quay l·∫°i
              </p>
            </div>
          )}

          {step === "verify" && (
            <div className="space-y-4">
              <label className="block text-sm mb-1 text-gray-600">Nh·∫≠p m√£ x√°c nh·∫≠n (4 s·ªë)</label>
              <input
                type="text"
                name="verifyCode"
                value={form.verifyCode}
                onChange={handleInputChange}
                className="w-full border px-3 py-2 rounded text-center tracking-widest text-xl"
                maxLength={4}
              />
              <button
                type="button"
                onClick={handleVerifyCode}
                className="w-full bg-green-600 hover:bg-green-700 text-white py-2 rounded"
              >
                X√°c nh·∫≠n
              </button>
              <p className="text-sm text-blue-500 cursor-pointer" onClick={() => setStep("email")}>
                üîÅ G·ª≠i l·∫°i m√£
              </p>
            </div>
          )}
        </>
      )}

      {message && <p className="mt-4 text-center text-sm text-red-600">{message}</p>}
    </div>
  );
}
